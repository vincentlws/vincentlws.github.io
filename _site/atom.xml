<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
   <title>vincentlws.github.io</title>
   <link href="http://vincentlws.github.io/atom.xml" rel="self" type="application/atom+xml"/>
   <link href="http://vincentlws.github.io" rel="alternate" type="text/html" />
   <updated>2014-05-21T21:01:18+08:00</updated>
   <id>http://vincentlws.github.io</id>
   <author>
     <name></name>
     <email></email>
   </author>

   
   <entry>
     <title>Avalon如何构造model</title>
     <link href="http://vincentlws.github.io/avalon-analyse-3"/>
     <updated>2014-05-15T00:00:00+08:00</updated>
     <id>http://beiyuu.com/avalon-analyse-3</id>
     <content type="html">&lt;h2&gt;创建jQuery式的无new 实例化结构&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;avalon = function(el) { //创建jQuery式的无new 实例化结构
    return new avalon.init(el)
}

avalon.init = function(el) {
    this[0] = this.element = el
}

avalon.fn = avalon.prototype = avalon.init.prototype
&lt;/code&gt;&lt;/pre&gt;
</content>
   </entry>
   
   <entry>
     <title>Avalon如何构造model</title>
     <link href="http://vincentlws.github.io/avalon-analyse-3"/>
     <updated>2014-05-13T00:00:00+08:00</updated>
     <id>http://beiyuu.com/avalon-analyse-3</id>
     <content type="html">&lt;h1&gt;#&lt;/h1&gt;
</content>
   </entry>
   
   <entry>
     <title>Avalon基本工具函数</title>
     <link href="http://vincentlws.github.io/avalon-analyse-2"/>
     <updated>2014-05-13T00:00:00+08:00</updated>
     <id>http://beiyuu.com/avalon-analyse-2</id>
     <content type="html">&lt;h2&gt;创建jQuery式的无new 实例化结构&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;avalon = function(el) { //创建jQuery式的无new 实例化结构
    return new avalon.init(el)
}

avalon.init = function(el) {
    this[0] = this.element = el
}

avalon.fn = avalon.prototype = avalon.init.prototype
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其实在&lt;strong&gt;严格模式(&#39;use strict&#39;)&lt;/strong&gt;下，不使用var显示声明一个变量是会报错的，所以最好改成&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;window.avalon = function(el) { //创建jQuery式的无new 实例化结构
    return new avalon.init(el);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;所谓创建&lt;strong&gt;无new实例化结构&lt;/strong&gt;为了是避免出现new的方式生成实例&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var el = new avalon(&#39;id&#39;); //new生成实例
var el = avalon(&#39;id&#39;); //直接返回实例
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2&gt;avalon.type类型判断&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;function getType(obj) { //取得类型
    if (obj == null) {
        return String(obj)
    }
    // 早期的webkit内核浏览器实现了已废弃的ecma262v4标准，可以将正则字面量当作函数使用，因此typeof在判定正则时会返回function
    return typeof obj === &quot;object&quot; || typeof obj === &quot;function&quot; ? class2type[serialize.call(obj)] || &quot;object&quot; : typeof obj
}
avalon.type = getType
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;serialize&lt;/code&gt;：Object.prototype.toString&lt;/li&gt;
&lt;li&gt;&lt;code&gt;class2type&lt;/code&gt;：所有类型的json对象&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;结构如下&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class2type: Object
    [object Array]: &quot;array&quot;
    [object Boolean]: &quot;boolean&quot;
    [object Date]: &quot;date&quot;
    [object Error]: &quot;error&quot;
    [object Function]: &quot;function&quot;
    [object Number]: &quot;number&quot;
    [object Object]: &quot;object&quot;
    [object RegExp]: &quot;regexp&quot;
    [object String]: &quot;string&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;当传入参数为null、undefined时，直接返回&quot;null&quot;、&quot;undefined&quot;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if (obj == null) {
    return String(obj)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;当传入参数typeof 为 &quot;function&quot;时，根据其toString返回的字符串，从&lt;code&gt;class2type&lt;/code&gt;中匹配对应的类型&lt;/p&gt;

&lt;h2&gt;avalon.isWindow的实现&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;avalon.isWindow = function(obj) {
    if (!obj)
        return false
    // 利用IE678 window == document为true,document == window竟然为false的神奇特性
    // 标准浏览器及IE9，IE10等使用 正则检测
    return obj == obj.document &amp;amp;&amp;amp; obj.document != obj
}

function isWindow(obj) {
    return rwindow.test(serialize.call(obj))
}

if (isWindow(window)) {
    avalon.isWindow = isWindow
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;在ie678&lt;/strong&gt;下使用以下代码判断&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;obj == obj.document &amp;amp;&amp;amp; obj.document != obj
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;因为在不同浏览器中&lt;code&gt;Object.prototype.toString(window)&lt;/code&gt;返回的值不一致，所以使用了正则判断&lt;code&gt;/^\[object (Window|DOMWindow|global)\]$/&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[object Window]firefox 
[object Window]opera
[object DOMWindow]safai
[object global]chrome
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;而在jquery中使用的是，以下这种方式&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;obj != null &amp;amp;&amp;amp; obj === obj.window;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;但此方式在以下代码时会失效（防君子不防小人）&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var obj = {};
obj.window = obj;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;但是这样定义对象的人毕竟少之又少，估计jquery应该是为了性能做出了让步（正则在浏览器下效率低下），使用了最简单的&lt;code&gt;obj != null &amp;amp;&amp;amp; obj == obj.window;&lt;/code&gt;，大家可以根据自身要求来使用不同的方案&lt;/p&gt;

&lt;h2&gt;avalon.isPlainObject的实现&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;//判定是否是一个朴素的javascript对象（Object），不是DOM对象，不是BOM对象，不是自定义类的实例。
avalon.isPlainObject = function(obj) {
    if (getType(obj) !== &quot;object&quot; || obj.nodeType || this.isWindow(obj)) {
        return false
    }
    try {
        if (obj.constructor &amp;amp;&amp;amp; !ohasOwn.call(obj.constructor.prototype, &quot;isPrototypeOf&quot;)) {
            return false
        }
    } catch (e) {
        return false
    }
    return true
}

if (rnative.test(Object.getPrototypeOf)) {
    avalon.isPlainObject = function(obj) {
        return !!obj &amp;amp;&amp;amp; typeof obj === &quot;object&quot; &amp;amp;&amp;amp; Object.getPrototypeOf(obj) === oproto
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ohasOwn.call(obj.constructor.prototype, &quot;isPrototypeOf&quot;)&lt;/code&gt;对象原型中存在&lt;code&gt;isPrototypeOf&lt;/code&gt;属性则代表是朴素的Object对象&lt;/li&gt;
&lt;li&gt;ECMA V5为Object添加了静态的&lt;code&gt;getPrototypeOf&lt;/code&gt;方法，因此使用正则&lt;code&gt;/\[native code\]/&lt;/code&gt;判断&lt;code&gt;Object.getPrototypeOf&lt;/code&gt;为Object的静态原生函数时，可使用&lt;code&gt;!!obj &amp;amp;&amp;amp; typeof obj === &quot;object&quot; &amp;amp;&amp;amp; Object.getPrototypeOf(obj) === oproto&lt;/code&gt;判断是否朴素的Object对象&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;avalon.mix 对象属性拷贝&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;avalon.mix = avalon.fn.mix = function() {
    var options, name, src, copy, copyIsArray, clone,
            target = arguments[0] || {},
            i = 1,
            length = arguments.length,
            deep = false

    // 如果第一个参数为布尔,判定是否深拷贝
    if (typeof target === &quot;boolean&quot;) {
        deep = target
        target = arguments[1] || {}
        i++
    }

    //确保接受方为一个复杂的数据类型
    if (typeof target !== &quot;object&quot; &amp;amp;&amp;amp; getType(target) !== &quot;function&quot;) {
        target = {}
    }

    //如果只有一个参数，那么新成员添加于mix所在的对象上
    if (i === length) {
        target = this
        i--
    }

    for (; i &amp;lt; length; i++) {
        //只处理非空参数
        if ((options = arguments[i]) != null) {
            for (name in options) {
                src = target[name]
                copy = options[name]

                // 防止环引用
                if (target === copy) {
                    continue
                }
                if (deep &amp;amp;&amp;amp; copy &amp;amp;&amp;amp; (avalon.isPlainObject(copy) || (copyIsArray = Array.isArray(copy)))) {

                    if (copyIsArray) {
                        copyIsArray = false
                        clone = src &amp;amp;&amp;amp; Array.isArray(src) ? src : []

                    } else {
                        clone = src &amp;amp;&amp;amp; avalon.isPlainObject(src) ? src : {}
                    }

                    target[name] = avalon.mix(deep, clone, copy)
                } else if (copy !== void 0) {
                    target[name] = copy
                }
            }
        }
    }
    return target
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;与jquery的extend用法一样&lt;/p&gt;

&lt;h2&gt;avalon.oneObject方法&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;function oneObject(array, val) {
    if (typeof array === &quot;string&quot;) {
        array = array.match(rword) || []
    }
    var result = {},
        value = val !== void 0 ? val : 1
    for (var i = 0, n = array.length; i &amp;lt; n; i++) {
        result[array[i]] = value
    }
    return result
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;根据传入数组，生成value为参数val的json对象，能接受传入逗号或空格分割的字符串&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;oneObject([&#39;a&#39;, &#39;b&#39;, &#39;c&#39;], 1)
oneObject(&#39;a,b,c&#39;, 1)
oneObject(&#39;a b c&#39;, 1)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;avalon.range方法&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;range: function(start, end, step) { // 用于生成整数数组
        step || (step = 1)
        if (end == null) {
            end = start || 0
            start = 0
        }
        var index = -1,
            length = Math.max(0, Math.ceil((end - start) / step)),
            result = Array(length)
        while (++index &amp;lt; length) {
            result[index] = start
            start += step
        }
        return result
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;生成整数数组，例子如下&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;avalon.range(10)
=&amp;gt; [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
avalon.range(1, 11)
=&amp;gt; [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
avalon.range(0, 30, 5)
=&amp;gt; [0, 5, 10, 15, 20, 25]
avalon.range(0, -10, -1)
=&amp;gt; [0, -1, -2, -3, -4, -5, -6, -7, -8, -9]
avalon.range(0)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;avalon.bind avalon.unbind方法&lt;/h2&gt;

&lt;p&gt;以后章节分析&lt;/p&gt;

&lt;h2&gt;avalon.css方法&lt;/h2&gt;

&lt;p&gt;以后章节分析&lt;/p&gt;

&lt;h2&gt;avalon.each方法&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;each: function(obj, fn) {
        if (obj) { //排除null, undefined
            var i = 0
            if (isArrayLike(obj)) {
                for (var n = obj.length; i &amp;lt; n; i++) {
                    fn(i, obj[i])
                }
            } else {
                for (i in obj) {
                    if (obj.hasOwnProperty(i)) {
                        fn(i, obj[i])
                    }
                }
            }
        }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;与jquery的each使用方法一样，其中&lt;code&gt;isArrayLike&lt;/code&gt;代码如下&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//只让节点集合，纯数组，arguments与拥有非负整数的length属性的纯JS对象通过
function isArrayLike(obj) {
    if (obj &amp;amp;&amp;amp; typeof obj === &quot;object&quot; &amp;amp;&amp;amp; !avalon.isWindow(obj)) {
        var n = obj.length
        if (+n === n &amp;amp;&amp;amp; !(n % 1) &amp;amp;&amp;amp; n &amp;gt;= 0) { //检测length属性是否为非负整数
            try {
                if ({}.propertyIsEnumerable.call(obj, &quot;length&quot;) === false) { //如果是原生对象
                    return Array.isArray(obj) || /^\s?function/.test(obj.item || obj.callee)
                }
                return true
            } catch (e) { //IE的NodeList直接抛错
                return true
            }
        }
    }
    return false
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;里面主要要注意是&lt;code&gt;{}.propertyIsEnumerable.call(obj, &quot;length&quot;) === false&lt;/code&gt;，是用来判断是否元素的对象，不用hasOwnProperty是因为&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var a = [];
console.log(a.hasOwnProperty(&#39;length&#39;));       // &quot;true&quot;
console.log(a.propertyIsEnumerable(&#39;length&#39;)); // &quot;false&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;avalon.getWidgetData方法&lt;/h2&gt;

&lt;p&gt;以后章节分析&lt;/p&gt;

&lt;h2&gt;avalon.Array 方法&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;Array: {
        ensure: function(target, item) {
            //只有当前数组不存在此元素时只添加它
            if (target.indexOf(item) === -1) {
                target.push(item)
            }
            return target
        },
        removeAt: function(target, index) {
            //移除数组中指定位置的元素，返回布尔表示成功与否。
            return !!target.splice(index, 1).length
        },
        remove: function(target, item) {
            //移除数组中第一个匹配传参的那个元素，返回布尔表示成功与否。
            var index = target.indexOf(item)
            if (~index)
                return avalon.Array.removeAt(target, index)
            return false
        }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里看注释就能看懂了，要留意的地方就是&lt;code&gt;~index&lt;/code&gt;，意思是对&lt;code&gt;index&lt;/code&gt;取反，&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~-1 =&amp;gt; 0
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;avalon.nextTick方法&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;avalon.nextTick = window.setImmediate ? setImmediate.bind(window) : function(callback) {
    setTimeout(callback, 0) 
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在IE10,11下提供了&lt;code&gt;setImmediate&lt;/code&gt;方法，其方法能在UI空闲时立刻执行，使用&lt;code&gt;setTimeout&lt;/code&gt;虽然也能达到相同目的，
但是&lt;code&gt;setTimeout&lt;/code&gt;在不同浏览器下延迟时间不一，同时也比&lt;code&gt;setImmediate&lt;/code&gt;要慢，所以优先使用&lt;code&gt;setImmediate&lt;/code&gt;方法&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;code&gt;setImmediate&lt;/code&gt;，&lt;code&gt;setTimeout&lt;/code&gt;，&lt;code&gt;setInterval&lt;/code&gt;与线程的关系可看此文章&lt;a href=&quot;http://www.iamued.com/qianduan/1645.html&quot;&gt;javascript线程解释（setTimeout,setInterval你不知道的事）&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h2&gt;结尾&lt;/h2&gt;

&lt;p&gt;以上就是Avalon中的基本工具函数，主要关注了函数的简单实现方法与需要关注的地方，下一章预告&lt;a href=&quot;/avalon-analyse-3&quot;&gt;Avalon如何构造model&lt;/a&gt;&lt;/p&gt;
</content>
   </entry>
   
   <entry>
     <title>avalon源码分析目录</title>
     <link href="http://vincentlws.github.io/avalon-analyse-1"/>
     <updated>2014-05-13T00:00:00+08:00</updated>
     <id>http://beiyuu.com/avalon-analyse-1</id>
     <content type="html">&lt;h2&gt;avalon源码分析目录&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/avalon-analyse-2&quot;&gt;Avalon基本工具函数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/avalon-analyse-3&quot;&gt;Avalon如何构造model&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/avalon-analyse-4&quot;&gt;amd的配置模块&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/avalon-analyse-5&quot;&gt;Avalon对dom方法的一些封装&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/avalon-analyse-6&quot;&gt;Avalon解析html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/avalon-analyse-7&quot;&gt;Avalon的观察者模式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/avalon-analyse-8&quot;&gt;Avalon的依赖收集与触发&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/avalon-analyse-9&quot;&gt;Avalon的扫描系统&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;。。。&lt;/p&gt;
</content>
   </entry>
   
 
</feed>
