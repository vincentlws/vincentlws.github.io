<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
   <title>vincentlws.github.io</title>
   <link href="http://vincentlws.github.io/atom.xml" rel="self" type="application/atom+xml"/>
   <link href="http://vincentlws.github.io" rel="alternate" type="text/html" />
   <updated>2014-05-13T17:53:31+08:00</updated>
   <id>http://vincentlws.github.io</id>
   <author>
     <name></name>
     <email></email>
   </author>

   
   <entry>
     <title>Avalon基本工具函数</title>
     <link href="http://vincentlws.github.io/avalon-analyse-2"/>
     <updated>2014-05-13T00:00:00+08:00</updated>
     <id>http://beiyuu.com/avalon-analyse-2</id>
     <content type="html">&lt;h2&gt;创建jQuery式的无new 实例化结构&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;avalon = function(el) { //创建jQuery式的无new 实例化结构
    return new avalon.init(el)
}

avalon.init = function(el) {
    this[0] = this.element = el
}

avalon.fn = avalon.prototype = avalon.init.prototype
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其实在&lt;strong&gt;严格模式(&#39;use strict&#39;)&lt;/strong&gt;下，不使用var显示声明一个变量是会报错的，所以最好改成&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;window.avalon = function(el) { //创建jQuery式的无new 实例化结构
    return new avalon.init(el);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;所谓创建&lt;strong&gt;无new实例化结构&lt;/strong&gt;为了是避免出现new的方式生成实例&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var el = new avalon(&#39;id&#39;); //new生成实例
var el = avalon(&#39;id&#39;); //直接返回实例
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;getType类型判断&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;function getType(obj) { //取得类型
    if (obj == null) {
        return String(obj)
    }
    // 早期的webkit内核浏览器实现了已废弃的ecma262v4标准，可以将正则字面量当作函数使用，因此typeof在判定正则时会返回function
    return typeof obj === &quot;object&quot; || typeof obj === &quot;function&quot; ? class2type[serialize.call(obj)] || &quot;object&quot; : typeof obj
}
avalon.type = getType
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;serialize&lt;/code&gt;：Object.prototype.toString&lt;/li&gt;
&lt;li&gt;&lt;code&gt;class2type&lt;/code&gt;：所有类型的json对象&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;结构如下&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class2type: Object
    [object Array]: &quot;array&quot;
    [object Boolean]: &quot;boolean&quot;
    [object Date]: &quot;date&quot;
    [object Error]: &quot;error&quot;
    [object Function]: &quot;function&quot;
    [object Number]: &quot;number&quot;
    [object Object]: &quot;object&quot;
    [object RegExp]: &quot;regexp&quot;
    [object String]: &quot;string&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;当传入参数为null、undefined时，直接返回&quot;null&quot;、&quot;undefined&quot;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if (obj == null) {
    return String(obj)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;当传入参数typeof 为 &quot;function&quot;时，根据其toString返回的字符串，从&lt;code&gt;class2type&lt;/code&gt;中匹配对应的类型&lt;/p&gt;

&lt;h2&gt;isWindow的实现&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;avalon.isWindow = function(obj) {
    if (!obj)
        return false
    // 利用IE678 window == document为true,document == window竟然为false的神奇特性
    // 标准浏览器及IE9，IE10等使用 正则检测
    return obj == obj.document &amp;amp;&amp;amp; obj.document != obj
}

function isWindow(obj) {
    return rwindow.test(serialize.call(obj))
}

if (isWindow(window)) {
    avalon.isWindow = isWindow
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在ie678下使用以下代码判断&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;obj == obj.document &amp;amp;&amp;amp; obj.document != obj
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在不同浏览器中&lt;code&gt;Object.prototype.toString(window)&lt;/code&gt;返回的值不一致，所以使用了正则判断&lt;code&gt;/^\[object (Window|DOMWindow|global)\]$/&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[object Window]firefox 
[object Window]opera
[object DOMWindow]safai
[object global]chrome
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;但在jquery中使用的是，以下这种方式&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;obj != null &amp;amp;&amp;amp; obj == obj.window;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;此方式在以下代码时会失效（防君子不防小人）&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var obj = {};
obj.window = obj;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;但是这样定义对象的人毕竟少之又少，估计jquery应该是为了性能做出了让步（正则在浏览器下效率低下），使用了最简单的&lt;code&gt;obj != null &amp;amp;&amp;amp; obj == obj.window;&lt;/code&gt;，大家可以根据自身要求来使用不同的方案&lt;/p&gt;

&lt;h2&gt;isPlainObject的实现&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;//判定是否是一个朴素的javascript对象（Object），不是DOM对象，不是BOM对象，不是自定义类的实例。
avalon.isPlainObject = function(obj) {
    if (getType(obj) !== &quot;object&quot; || obj.nodeType || this.isWindow(obj)) {
        return false
    }
    try {
        if (obj.constructor &amp;amp;&amp;amp; !ohasOwn.call(obj.constructor.prototype, &quot;isPrototypeOf&quot;)) {
            return false
        }
    } catch (e) {
        return false
    }
    return true
}

if (rnative.test(Object.getPrototypeOf)) {
    avalon.isPlainObject = function(obj) {
        return !!obj &amp;amp;&amp;amp; typeof obj === &quot;object&quot; &amp;amp;&amp;amp; Object.getPrototypeOf(obj) === oproto
    }
}
&lt;/code&gt;&lt;/pre&gt;
</content>
   </entry>
   
   <entry>
     <title>avalon源码分析</title>
     <link href="http://vincentlws.github.io/avalon-analyse-1"/>
     <updated>2014-05-13T00:00:00+08:00</updated>
     <id>http://beiyuu.com/avalon-analyse-1</id>
     <content type="html">&lt;h2&gt;avalon源码分析目录&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/avalon-analyse-2&quot;&gt;Avalon基本工具函数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/avalon-analyse-3&quot;&gt;Avalon如何生成model&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/avalon-analyse-4&quot;&gt;Avalon修复defineProperties的支持&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/avalon-analyse-5&quot;&gt;Amd的配置模块&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/avalon-analyse-6&quot;&gt;Avalon对dom方法的一些封装&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/avalon-analyse-7&quot;&gt;Avalon解析html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/avalon-analyse-8&quot;&gt;Avalon的观察者模式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/avalon-analyse-9&quot;&gt;Avalon的依赖收集与触发&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/avalon-analyse-10&quot;&gt;Avalon的扫描系统&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;。。。&lt;/p&gt;
</content>
   </entry>
   
 
</feed>
